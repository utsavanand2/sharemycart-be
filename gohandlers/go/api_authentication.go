// Package swagger ...s
/*
 * Share my Cart
 *
 * Stay home. Stay safe. I'll bring your groceries along as I get mine.
 *
 * API version: 0.1.0
 * Contact: sharemycart@beimir.net
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */
package swagger

import (
	"context"
	"encoding/json"
	"fmt"
	"io/ioutil"
	"net/http"

	"github.com/sirupsen/logrus"

	"firebase.google.com/go/auth"
)

type response struct {
	Body    string `json:"body",omitempty`
	UserUID string `json:"uid,omitempty"`
	Err     error  `json:"err,omitempty"`
}

// AddUser creates a new user
func (f *Firebase) AddUser(w http.ResponseWriter, r *http.Request) {
	registration := Registration{}
	body, err := ioutil.ReadAll(r.Body)
	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	if err != nil {
		w.WriteHeader(400)
		response := &response{Err: err}
		res, _ := json.Marshal(response)
		w.Write(res)
	}
	err = json.Unmarshal(body, &registration)
	if err != nil {
		w.WriteHeader(400)
		response := &response{Err: err}
		res, _ := json.Marshal(response)
		w.Write(res)
	}
	ctx := context.Background()
	authClient, err := f.App.Auth(ctx)
	if err != nil {
		w.WriteHeader(400)
		response := &response{Err: fmt.Errorf("cannot create authClient: %v", err)}
		res, _ := json.Marshal(response)
		w.Write(res)
	}
	userParams := (&auth.UserToCreate{}).
		Email(registration.Email).
		EmailVerified(false).
		Password(registration.Password).
		DisplayName(registration.Username).
		Disabled(false)
	userRecord, err := authClient.CreateUser(ctx, userParams)
	if err != nil {
		w.WriteHeader(400)
		response := &response{
			Body: "",
			Err:  err,
		}
		res, _ := json.Marshal(response)
		w.Write(res)
	}
	response := &response{
		Body:    "user created",
		UserUID: userRecord.UserInfo.UID,
		Err:     err,
	}
	w.WriteHeader(201)
	json.NewEncoder(w).Encode(response)
	logrus.Infof("user created: %v", userRecord.UserInfo)
}

// EmailVerification verifies the email of the user
func (f *Firebase) EmailVerification(w http.ResponseWriter, r *http.Request) {
	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	w.WriteHeader(http.StatusOK)
}

// LogoutUser logs out the user session
func (f *Firebase) LogoutUser(w http.ResponseWriter, r *http.Request) {
	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	w.WriteHeader(http.StatusOK)
}

// ResetPassword resets the user password
func (f *Firebase) ResetPassword(w http.ResponseWriter, r *http.Request) {
	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	w.WriteHeader(http.StatusOK)
}

// UserLogin logs the user in
func (f *Firebase) UserLogin(w http.ResponseWriter, r *http.Request) {
	w.Header().Set("Content-Type", "application/json; charset=UTF-8")
	w.WriteHeader(http.StatusOK)
}
