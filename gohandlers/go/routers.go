/*
 * Collaborative shopping
 *
 * Collaboratively go shopping. Create shopping lists, share them with others, bring their needs along
 *
 * API version: 1.0.0
 * Contact: collaborative-shopping@beimir.net
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */
package swagger

import (
	"fmt"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

type Route struct {
	Name        string
	Method      string
	Pattern     string
	HandlerFunc http.HandlerFunc
	Firebase    Firebase
}

type Routes []Route

// NewRouter returns a new mux.Router
func (firebase *Firebase) NewRouter() *mux.Router {
	router := mux.NewRouter().StrictSlash(true)
	routes := getRouteSlice(firebase)
	for _, route := range routes {
		var handler http.Handler
		handler = route.HandlerFunc
		handler = Logger(handler, route.Name)

		router.
			Methods(route.Method).
			Path(route.Pattern).
			Name(route.Name).
			Handler(handler)
	}

	return router
}

func (firebase *Firebase) Index(w http.ResponseWriter, r *http.Request) {
	fmt.Fprintf(w, "Hello World!")
}

func getRouteSlice(firebase *Firebase) Routes {
	var routes = Routes{
		Route{
			"Index",
			"GET",
			"/",
			firebase.Index,
			*firebase,
		},

		Route{
			"AddUser",
			strings.ToUpper("Post"),
			"/auth/register",
			firebase.AddUser,
			*firebase,
		},

		Route{
			"EmailVerification",
			strings.ToUpper("Post"),
			"/auth/reset-password",
			firebase.EmailVerification,
			*firebase,
		},

		Route{
			"LogoutUser",
			strings.ToUpper("Post"),
			"/auth/logout",
			firebase.LogoutUser,
			*firebase,
		},

		Route{
			"ResetPassword",
			strings.ToUpper("Post"),
			"/auth/reset-password/{token}",
			firebase.ResetPassword,
			*firebase,
		},

		Route{
			"UserLogin",
			strings.ToUpper("Post"),
			"/auth/login",
			firebase.UserLogin,
			*firebase,
		},

		Route{
			"AddShoppingList",
			strings.ToUpper("Post"),
			"/lists",
			firebase.AddShoppingList,
			*firebase,
		},

		Route{
			"DeleteShoppingList",
			strings.ToUpper("Delete"),
			"/lists/{id}",
			firebase.DeleteShoppingList,
			*firebase,
		},

		Route{
			"GetShoppingLists",
			strings.ToUpper("Get"),
			"/lists",
			firebase.GetShoppingLists,
			*firebase,
		},

		Route{
			"UpdateShoppingList",
			strings.ToUpper("Put"),
			"/lists/{id}",
			firebase.UpdateShoppingList,
			*firebase,
		},

		Route{
			"AddShoppingListItem",
			strings.ToUpper("Post"),
			"/lists/{id}/items",
			firebase.AddShoppingListItem,
			*firebase,
		},

		Route{
			"DeleteShoppingListItem",
			strings.ToUpper("Delete"),
			"/lists/{id}/items/{item_id}",
			firebase.DeleteShoppingListItem,
			*firebase,
		},

		Route{
			"GetShoppingListItems",
			strings.ToUpper("Get"),
			"/lists/{id}",
			firebase.GetShoppingListItems,
			*firebase,
		},

		Route{
			"UpdateShoppingListItem",
			strings.ToUpper("Put"),
			"/lists/{id}/items/{item_id}",
			firebase.UpdateShoppingListItem,
			*firebase,
		},
	}

	return routes
}
